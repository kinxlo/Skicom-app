8067504592



import NextAuth from "next-auth";
import Credentials from "next-auth/providers/credentials";
import Google from "next-auth/providers/google";

import { HttpAdapter } from "~/adapters/http-adapter";
import { AuthService } from "~/services/auth.service";

const httpAdapter = new HttpAdapter();
const authService = new AuthService(httpAdapter);

const authOptions = NextAuth({
  providers: [

    Credentials({
      name: `Credentials`,

      credentials: {
        email: { label: `Email`, type: `email` },
        password: { label: `Passcode`, type: `password` },
      },

      authorize: async (credentials) => {
        if (!credentials?.email || !credentials?.password) {
          throw new Error("Please provide both email and passcode.");
        }
        const response = await authService.login({
          email: credentials.email as string,
          password: credentials.password as string,
        });
        return { user: response.user, token: response.token }; // This must match the structure { user, token }
      },
    }),
  ],
  pages: {
    signIn: "/admin/login",
  },
  callbacks: {
    async jwt({ token, user }) {
      console.log(token, user);

      const USER = {
        ...user.user,
        token: user.token,
      };

      if (USER) {
        token.id = USER.id;
        token.first_name = USER.first_name;
        token.last_name = USER.last_name;
        token.email = USER.email;
        token.image = USER.avatar;
        token.role = USER.role;
        token.bearerToken = USER.token;
      }

      return token;
    },
    async session({ session, token }) {
      return {
        ...session,
        user: {
          ...session.user,
          id: token.id as string,
          firstName: token.first_name as string,
          lastName: token.last_name as string,
          email: token.email as string,
          image: token.image as string,
          token: token.bearerToken as string,
          role: token.role as string,
        },
      };
    },
  },
  debug: true,
});

export const { handlers, signIn, signOut, auth } = authOptions;


import { DefaultSession } from "next-auth";

declare module "next-auth" {

  interface Session {
    user: User & DefaultSession["user"];
    expires: string;
    error: string;
  }
}







// export async function updateSession(request: NextRequest) {
//   const skicom = request.cookies.get("skicom")?.value;
//   if (!skicom) return;

//   const parsed = await decrypt(skicom);

//   // Ensure no update occurs after logout
//   if (
//     !parsed ||
//     !parsed.expires ||
//     Date.now() >= new Date(parsed.expires).getTime()
//   ) {
//     return;
//   }

//   parsed.expires = new Date(Date.now() + 60 * 60 * 1000);
//   const response = NextResponse.next();
//   response.cookies.set({
//     name: "skicom",
//     value: await encrypt(parsed),
//     httpOnly: true,
//     expires: parsed.expires,
//   });
//   return response;
// }






















